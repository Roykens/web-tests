//
// HamillerTubeCAData.cs
//
// Author:
//       Martin Baulig <martin.baulig@xamarin.com>
//
// Copyright (c) 2016 Xamarin Inc. (http://www.xamarin.com)

//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;

namespace Xamarin.WebTests.Resources
{
	public class HamillerTubeCAData : CertificateInfo
	{
		public HamillerTubeCAData ()
			: base (CertificateResourceType.HamillerTubeCA)
		{
		}

		const string subject = "/CN=Hamiller-Tube.local/C=US/ST=Massachusetts/O=Xamarin/OU=Engineering/emailAddress=martin.baulig@xamarin.com";
		const string managedSubject = "E=martin.baulig@xamarin.com, OU=Engineering, O=Xamarin, S=Massachusetts, C=US, CN=Hamiller-Tube.local";

		static readonly byte[] hash = new byte[] {
			0xaa, 0xab, 0x62, 0x5a, 0x1f, 0x5e, 0xa1, 0xdb, 0xdb, 0xb6, 0x58, 0xfb, 0x36, 0x06, 0x13, 0xbe, 0x49, 0xe6, 0x7a, 0xec
		};

		static readonly byte[] publicKeyData = new byte[] {
			0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xc2, 0x67, 0x57, 0x08, 0x17, 0x6e, 0xae,
			0x61, 0x5d, 0xde, 0x18, 0x41, 0x9c, 0x23, 0x28, 0xb1, 0x9d, 0x6c, 0x48, 0x80, 0x61, 0x51, 0xe9,
			0x9e, 0x3c, 0xc0, 0x67, 0xed, 0x38, 0x85, 0xe5, 0x97, 0x76, 0xc4, 0x79, 0xb3, 0x0e, 0x1d, 0xd5,
			0xf2, 0x17, 0x15, 0xfb, 0x1a, 0x2d, 0xf9, 0x7f, 0xce, 0xc3, 0x7c, 0xb2, 0x81, 0x14, 0x5f, 0x4b,
			0xa4, 0x06, 0xf9, 0xc6, 0x4e, 0x4d, 0x6e, 0x22, 0xa4, 0x3e, 0x3e, 0xb2, 0xeb, 0x33, 0x75, 0xd3,
			0xbe, 0xb5, 0xea, 0xd1, 0xcb, 0xbd, 0x5e, 0x64, 0x4f, 0xf5, 0xa1, 0x1a, 0x24, 0x46, 0xd0, 0x21,
			0x4d, 0xa4, 0x05, 0x7b, 0x90, 0x2f, 0x59, 0x68, 0xd8, 0x60, 0xb0, 0xeb, 0xe5, 0x7e, 0xec, 0x6e,
			0xbb, 0x24, 0x81, 0x04, 0x1e, 0x97, 0x2c, 0xdc, 0x55, 0x11, 0x54, 0xa2, 0xc7, 0xa6, 0xae, 0x41,
			0x22, 0x68, 0x8f, 0xc3, 0x29, 0xb8, 0x99, 0x36, 0x7c, 0xa6, 0x3e, 0x6f, 0x15, 0x10, 0x51, 0xc1,
			0xaa, 0x89, 0x80, 0x04, 0x65, 0xc1, 0xcd, 0xa4, 0xc0, 0x8a, 0x26, 0xc7, 0x0a, 0x5f, 0xf4, 0xec,
			0x26, 0xc3, 0xba, 0x25, 0xb3, 0xa8, 0x44, 0x67, 0xc3, 0x11, 0x22, 0x27, 0xc6, 0x2c, 0x50, 0xe2,
			0x88, 0x72, 0x58, 0xd7, 0xb3, 0xa4, 0xc7, 0x94, 0xd2, 0xa4, 0xfb, 0x6e, 0x9e, 0x59, 0xd5, 0xc5,
			0xf7, 0x57, 0x9f, 0x0f, 0x87, 0xe4, 0xe3, 0x55, 0x8f, 0xb7, 0x83, 0x80, 0xe8, 0x74, 0x3e, 0x24,
			0xa0, 0x33, 0xbc, 0x2d, 0x4b, 0x5d, 0xcb, 0xde, 0xf8, 0xc5, 0x3a, 0x7d, 0xa3, 0xac, 0x46, 0x57,
			0x6d, 0xf1, 0x74, 0xd9, 0xa7, 0x17, 0xc6, 0xfc, 0xe4, 0x3a, 0xa0, 0xd1, 0x12, 0x54, 0xfd, 0xb6,
			0xb4, 0x75, 0x1e, 0xa5, 0xe8, 0xb5, 0x85, 0xb6, 0x60, 0xa5, 0x96, 0x10, 0x6d, 0x80, 0xe3, 0x3d,
			0x7d, 0xbc, 0xe9, 0x82, 0x33, 0xdd, 0xb9, 0x57, 0xef, 0x62, 0x02, 0xbf, 0x5f, 0x92, 0xc5, 0xe2,
			0xc4, 0x45, 0xb1, 0xae, 0xd1, 0x40, 0xb9, 0x7b, 0x20, 0x09, 0x80, 0xe5, 0xcd, 0x2c, 0x9c, 0x21,
			0x49, 0x87, 0x50, 0x5d, 0x8e, 0xfd, 0x19, 0x1a, 0x66, 0x3c, 0x68, 0x34, 0xe3, 0xda, 0x91, 0xe5,
			0x48, 0xa2, 0x5f, 0x3c, 0x20, 0x3c, 0x9f, 0x89, 0xed, 0x6e, 0x71, 0x65, 0x5c, 0x17, 0xb8, 0x52,
			0x68, 0x35, 0x51, 0xb9, 0x0e, 0x7e, 0xaf, 0x98, 0x66, 0x7c, 0x07, 0xf2, 0x2f, 0x07, 0xd3, 0x80,
			0x8c, 0x01, 0x23, 0x89, 0xcb, 0x8c, 0x03, 0x1e, 0xe4, 0x85, 0xe6, 0x48, 0x3a, 0xa1, 0x94, 0x28,
			0x63, 0xb0, 0xc1, 0xfe, 0x1e, 0x11, 0x9e, 0x65, 0x41, 0x36, 0x76, 0x78, 0x5e, 0xd2, 0x37, 0xc9,
			0x9a, 0x11, 0x1e, 0x5a, 0x5c, 0x77, 0xd8, 0xe5, 0xc5, 0x16, 0x42, 0xd0, 0x24, 0x18, 0x25, 0x6d,
			0xdf, 0x28, 0x15, 0x47, 0x06, 0x2c, 0xaf, 0x61, 0x89, 0x1a, 0x21, 0xae, 0x7f, 0x73, 0x1c, 0x46,
			0x4d, 0x76, 0x77, 0x8a, 0xd2, 0x49, 0xda, 0x30, 0xa1, 0x75, 0x2c, 0xfc, 0xed, 0x1a, 0xce, 0x91,
			0x5e, 0x00, 0x9a, 0x61, 0x66, 0xf4, 0x72, 0x6c, 0x4a, 0x70, 0xbe, 0x0f, 0xf2, 0x4e, 0xf1, 0xec,
			0xd9, 0x0e, 0x88, 0xef, 0x50, 0x12, 0xd8, 0xd1, 0x1a, 0x1f, 0xc5, 0xcb, 0x78, 0x13, 0x3d, 0x3f,
			0xe1, 0x5c, 0x43, 0xca, 0x28, 0xb0, 0xc0, 0xfe, 0x1d, 0x21, 0x37, 0x03, 0xea, 0x4b, 0x57, 0xbd,
			0x8c, 0x1e, 0x2c, 0x13, 0x06, 0x22, 0xd5, 0x74, 0xe8, 0x7e, 0x28, 0x08, 0xd9, 0x12, 0x03, 0xb3,
			0x53, 0x37, 0x4a, 0x22, 0xab, 0x2e, 0xb9, 0xfd, 0x23, 0x08, 0x7a, 0xd2, 0x88, 0x35, 0x7f, 0xb0,
			0xfb, 0xa9, 0x35, 0xb7, 0x15, 0x91, 0x0e, 0x58, 0x61, 0xc3, 0xb5, 0x39, 0x45, 0x1c, 0x37, 0xc1,
			0x75, 0xf0, 0x68, 0x1d, 0x22, 0xa9, 0x26, 0xa1, 0x2f, 0x02, 0x03, 0x01, 0x00, 0x01
		};

		static readonly byte[] subjectName_rawData = new byte[] {
			0x30, 0x81, 0x95, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x13, 0x48, 0x61,
			0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x2d, 0x54, 0x75, 0x62, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
			0x6c, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x16,
			0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0d, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x63, 0x68,
			0x75, 0x73, 0x65, 0x74, 0x74, 0x73, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13,
			0x07, 0x58, 0x61, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04,
			0x0b, 0x13, 0x0b, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x28,
			0x30, 0x26, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x16, 0x19, 0x6d,
			0x61, 0x72, 0x74, 0x69, 0x6e, 0x2e, 0x62, 0x61, 0x75, 0x6c, 0x69, 0x67, 0x40, 0x78, 0x61, 0x6d,
			0x61, 0x72, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d
		};

		static readonly byte[] subjectName_rawDataCanon = new byte[] {
			0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x68, 0x61, 0x6d, 0x69, 0x6c,
			0x6c, 0x65, 0x72, 0x2d, 0x74, 0x75, 0x62, 0x65, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x31, 0x0b,
			0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x0c, 0x02, 0x75, 0x73, 0x31, 0x16, 0x30, 0x14, 0x06,
			0x03, 0x55, 0x04, 0x08, 0x0c, 0x0d, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x63, 0x68, 0x75, 0x73, 0x65,
			0x74, 0x74, 0x73, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x07, 0x78, 0x61,
			0x6d, 0x61, 0x72, 0x69, 0x6e, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0b,
			0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x28, 0x30, 0x26, 0x06,
			0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01, 0x0c, 0x19, 0x6d, 0x61, 0x72, 0x74,
			0x69, 0x6e, 0x2e, 0x62, 0x61, 0x75, 0x6c, 0x69, 0x67, 0x40, 0x78, 0x61, 0x6d, 0x61, 0x72, 0x69,
			0x6e, 0x2e, 0x63, 0x6f, 0x6d
		};

		static readonly DateTime notBefore = new DateTime (2015, 8, 10, 8, 6, 1, DateTimeKind.Utc);
		static readonly DateTime notAfter = new DateTime (2025, 8, 7, 8, 6, 1, DateTimeKind.Utc);

		static readonly byte[] serialNumber = new byte[] {
			0x9b, 0x65, 0x72, 0x65, 0xf0, 0x07, 0x01, 0xa0
		};
		static readonly byte[] serialNumberMono = new byte[] {
			0xa0, 0x01, 0x07, 0xf0, 0x65, 0x72, 0x65, 0x9b, 0x00
		};

		static readonly CertificateNameInfo subjectName = new CertificateNameInfo (0x2f32c9b8L, 0xa40240fL, subjectName_rawData, subjectName_rawDataCanon, subject);
		static readonly CertificateNameInfo issuerName = new CertificateNameInfo (0x2f32c9b8L, 0xa40240fL, subjectName_rawData, subjectName_rawDataCanon, subject);

		public override string ManagedSubjectName {
			get { return managedSubject; }
		}

		public override string ManagedIssuerName {
			get { return managedSubject; }
		}

		public override byte[] Hash {
			get { return hash; }
		}

		public override byte[] PublicKeyData {
			get { return publicKeyData; }
		}

		public override string SubjectNameString {
			get { return subject; }
		}

		public override string IssuerNameString {
			get { return subject; }
		}

		public override DateTime NotBefore {
			get { return notBefore; }
		}

		public override DateTime NotAfter {
			get { return notAfter; }
		}

		public override byte[] SerialNumber {
			get { return serialNumber; }
		}

		public override byte[] SerialNumberMono {
			get { return serialNumberMono; }
		}

		public override int Version {
			get { return 3; }
		}

		public override CertificateNameInfo SubjectName {
			get { return subjectName; }
		}

		public override CertificateNameInfo IssuerName {
			get { return issuerName; }
		}

		public override string SignatureAlgorithmOid {
			get { return Oid_RsaWithSha256; }
		}

		public override string PublicKeyAlgorithmOid {
			get { return Oid_Rsa; }
		}

		public override byte[] PublicKeyParameters {
			get { return EmptyPublicKeyParameters; }
		}
	}
}

